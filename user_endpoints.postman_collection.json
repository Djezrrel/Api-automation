{
	"info": {
		"_postman_id": "cfb90806-326b-41aa-9034-1f5428a850b0",
		"name": "User endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2645049"
	},
	"item": [
		{
			"name": "Register a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should save a new user with valid data', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"    pm.expect(response.id).to.be.not.null\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const email = `sidney${new Date().getTime()}@email.com`\r",
							"pm.environment.set('email', email)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sidney Sousa\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"pm.environment.set('token', response.token)\r",
							"\r",
							"pm.test(\"it should authenticate a user with valid credentials\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(response.authorized).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate a user with invalid credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"pm.environment.set('token', response.token)\r",
							"\r",
							"pm.test(\"it should authenticate a user with valid credentials\", function () {\r",
							"    pm.response.to.have.status(401)\r",
							"    pm.expect(response.authorized).to.be.false\r",
							"    pm.expect(response.message == 'User not authorized').to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Senha456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a user with email conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should not save a user with the same email from a previously saved user', () => {\r",
							"    pm.response.to.have.status(400)\r",
							"    pm.expect(response.messages[0] == 'A user with this email already exists').to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sidney Sousa\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a user with invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should not save a user with an invalid name', () => {\r",
							"    pm.response.to.have.status(400)\r",
							"    pm.expect(response.messages[0] == 'User name must have between 5 and 50 characters').to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sid\",\r\n    \"email\": \"sid@email.com\",\r\n    \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a user with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should not save a user with an invalid email', () => {\r",
							"    pm.response.to.have.status(400)\r",
							"    pm.expect(response.messages[0] == 'Invalid email').to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sidney Sousa\",\r\n    \"email\": \"sidney.email.com\",\r\n    \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a user with invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should not save a user with an invalid password', () => {\r",
							"    pm.response.to.have.status(400)\r",
							"    pm.expect(response.messages[0] == 'Password must contain at least 8 characters, 1 uppercase character, and 1 digit').to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sidney Sousa\",\r\n    \"email\": \"sidneysousa@email.com\",\r\n    \"password\": \"minhasenha\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test('it should delete a previously saved user', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(response.message == 'User deleted').to.be.equals\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{email}}"
					]
				}
			},
			"response": []
		}
	]
}